#!/bin/bash

# Log all messages to standard output in addition to logfile
NCTL_LOG_STD=y

# External tool dependencies, MUST always be defined,
# even if empty (e.g.: declare -a crt1_request_tools_list=())
declare -a crt1_request_tools_list=()

# Source startup code
. @target@/netctl/lib/bash/crt1.sh

# Source functions libraries
. @target@/netctl/lib/bash/librtti.sh
. @target@/netctl/lib/bash/libiter.sh
. @target@/netctl/lib/bash/libfile.sh
. @target@/netctl/lib/bash/liblog.sh
. @target@/netctl/lib/bash/libprocess.sh

# Usage: __netconf_action {start|stop|restart|list|\
#			 vfup|vfdown|vflist|\
#			 brup|brdown|brlist|\
#			 bnup|bndown|bnlist|\
#			 phup|phdown|phlist|\
#			 dmup|dmdown|dmlist|\
#			 vzup|vzdown|vzlist|\
#			 gtup|gtdown|gtlist|\
#			 g6tup|g6tdown|g6tlist|\
#			 vxup|vxdown|vxlist|\
#			 vup|vdown|vlist|\
#			 mvup|mvdown|mvlist|\
#			 ivup|ivdown|ivlist|\
#			 gup|gdown|glist|\
#			 g6up|g6down|g6list|\
#			 ibup|ibdown|iblist|\
#			 ngup|ngdown|nglist|\
#			 rtup|rtdown|rtlist|\
#			 reup|redown|relist|\
#			 vrup|vrdown|vrlist} ...
__netconf_action()
{
	local action="${1:?missing 1st argument to function \"$FUNCNAME\" (action)}"
	shift
	local -i rc=0

	case "$action" in
		start)
			# Up VRF
			"$FUNCNAME" vfup "${netconf_vrf_list[@]}" || nctl_inc_rc rc

			# Up BRIDGE
			"$FUNCNAME" brup "${netconf_bridge_list[@]}" || nctl_inc_rc rc

			# Up BOND
			"$FUNCNAME" bnup "${netconf_bond_list[@]}" || nctl_inc_rc rc

			# Up PHYS
			"$FUNCNAME" phup "${netconf_phys_list[@]}" || nctl_inc_rc rc

			# Up DUMMY
			"$FUNCNAME" dmup "${netconf_dummy_list[@]}" || nctl_inc_rc rc

			# Up VETH
			"$FUNCNAME" vzup "${netconf_veth_list[@]}" || nctl_inc_rc rc

			# Up GRETAP
			"$FUNCNAME" gtup "${netconf_gretap_list[@]}" || nctl_inc_rc rc

			# Up IP6GRETAP
			"$FUNCNAME" g6tup "${netconf_ip6gretap_list[@]}" || nctl_inc_rc rc

			# Up VXLAN
			"$FUNCNAME" vxup "${netconf_vxlan_list[@]}" || nctl_inc_rc rc

			# Up VLAN
			"$FUNCNAME" vup "${netconf_vlan_list[@]}" || nctl_inc_rc rc

			# Up MACVLAN
			"$FUNCNAME" mvup "${netconf_macvlan_list[@]}" || nctl_inc_rc rc

			# Up IPVLAN
			"$FUNCNAME" ivup "${netconf_ipvlan_list[@]}" || nctl_inc_rc rc

			# Up GRE
			"$FUNCNAME" gup "${netconf_gre_list[@]}" || nctl_inc_rc rc

			# Up IP6GRE
			"$FUNCNAME" g6up "${netconf_ip6gre_list[@]}" || nctl_inc_rc rc

			# Up IFB
			"$FUNCNAME" ibup "${netconf_ifb_list[@]}" || nctl_inc_rc rc

			# Up NEIGHBOUR
			"$FUNCNAME" ngup "${netconf_neighbour_list[@]}" || nctl_inc_rc rc

			# Up ROUTE
			"$FUNCNAME" rtup "${netconf_route_list[@]}" || nctl_inc_rc rc

			# Up RULE
			"$FUNCNAME" reup "${netconf_rule_list[@]}" || nctl_inc_rc rc

			# Up VR
			"$FUNCNAME" vrup "${netconf_vr_list[@]}" || nctl_inc_rc rc
			;;
		stop)
			# Down VR
			"$FUNCNAME" vrdown "${netconf_vr_list[@]}" || nctl_inc_rc rc

			# Down RULE
			"$FUNCNAME" redown "${netconf_rule_list[@]}" || nctl_inc_rc rc

			# Down ROUTE
			"$FUNCNAME" rtdown "${netconf_route_list[@]}" || nctl_inc_rc rc

			# Down NEIGHBOUR
			"$FUNCNAME" ngdown "${netconf_neighbour_list[@]}" || nctl_inc_rc rc

			# Down IFB
			"$FUNCNAME" ibdown "${netconf_ifb_list[@]}" || nctl_inc_rc rc

			# Down IP6GRE
			"$FUNCNAME" g6down "${netconf_ip6gre_list[@]}" || nctl_inc_rc rc

			# Down GRE
			"$FUNCNAME" gdown "${netconf_gre_list[@]}" || nctl_inc_rc rc

			# Down IPVLAN
			"$FUNCNAME" ivdown "${netconf_ipvlan_list[@]}" || nctl_inc_rc rc

			# Down MACVLAN
			"$FUNCNAME" mvdown "${netconf_macvlan_list[@]}" || nctl_inc_rc rc

			# Down VLAN
			"$FUNCNAME" vdown "${netconf_vlan_list[@]}" || nctl_inc_rc rc

			# Down VXLAN
			"$FUNCNAME" vxdown "${netconf_vxlan_list[@]}" || nctl_inc_rc rc

			# Down IP6GRETAP
			"$FUNCNAME" g6tdown "${netconf_ip6gretap_list[@]}" || nctl_inc_rc rc

			# Down GRETAP
			"$FUNCNAME" gtdown "${netconf_gretap_list[@]}" || nctl_inc_rc rc

			# Down VETH
			"$FUNCNAME" vzdown "${netconf_veth_list[@]}" || nctl_inc_rc rc

			# Down DUMMY
			"$FUNCNAME" dmdown "${netconf_dummy_list[@]}" || nctl_inc_rc rc

			# Down PHYS
			"$FUNCNAME" phdown "${netconf_phys_list[@]}" || nctl_inc_rc rc

			# Down BOND
			"$FUNCNAME" bndown "${netconf_bond_list[@]}" || nctl_inc_rc rc

			# Down BRIDGE
			"$FUNCNAME" brdown "${netconf_bridge_list[@]}" || nctl_inc_rc rc

			# Down VRF
			"$FUNCNAME" vfdown "${netconf_vrf_list[@]}" || nctl_inc_rc rc
			;;
		restart)
			"$FUNCNAME" stop

			sleep 1

			"$FUNCNAME" start
			;;
		list)
			# List VRF
			"$FUNCNAME" vflist "${netconf_vrf_list[@]}" || nctl_inc_rc rc

			# List BRIDGE
			"$FUNCNAME" brlist "${netconf_bridge_list[@]}" || nctl_inc_rc rc

			# List BOND
			"$FUNCNAME" bnlist "${netconf_bond_list[@]}" || nctl_inc_rc rc

			# List PHYS
			"$FUNCNAME" phlist "${netconf_phys_list[@]}" || nctl_inc_rc rc

			# List DUMMY
			"$FUNCNAME" dmlist "${netconf_dummy_list[@]}" || nctl_inc_rc rc

			# List VETH
			"$FUNCNAME" vzlist "${netconf_veth_list[@]}" || nctl_inc_rc rc

			# List GRETAP
			"$FUNCNAME" gtlist "${netconf_gretap_list[@]}" || nctl_inc_rc rc

			# List IP6GRETAP
			"$FUNCNAME" g6tlist "${netconf_ip6gretap_list[@]}" || nctl_inc_rc rc

			# List VXLAN
			"$FUNCNAME" vxlist "${netconf_vxlan_list[@]}" || nctl_inc_rc rc

			# List VLAN
			"$FUNCNAME" vlist "${netconf_vlan_list[@]}" || nctl_inc_rc rc

			# List MACVLAN
			"$FUNCNAME" mvlist "${netconf_macvlan_list[@]}" || nctl_inc_rc rc

			# List IPVLAN
			"$FUNCNAME" ivlist "${netconf_ipvlan_list[@]}" || nctl_inc_rc rc

			# List GRE
			"$FUNCNAME" glist "${netconf_gre_list[@]}" || nctl_inc_rc rc

			# List IP6GRE
			"$FUNCNAME" g6list "${netconf_ip6gre_list[@]}" || nctl_inc_rc rc

			# List IFB
			"$FUNCNAME" iblist "${netconf_ifb_list[@]}" || nctl_inc_rc rc

			# List NEIGHBOUR
			"$FUNCNAME" nglist "${netconf_neighbour_list[@]}" || nctl_inc_rc rc

			# List ROUTE
			"$FUNCNAME" rtlist "${netconf_route_list[@]}" || nctl_inc_rc rc

			# List RULE
			"$FUNCNAME" relist "${netconf_rule_list[@]}" || nctl_inc_rc rc

			# List VR
			"$FUNCNAME" vrlist "${netconf_vr_list[@]}" || nctl_inc_rc rc
			;;
		vfup|vfdown|vflist|\
		brup|brdown|brlist|\
		bnup|bndown|bnlist|\
		phup|phdown|phlist|\
		dmup|dmdown|dmlist|\
		vzup|vzdown|vzlist|\
		gtup|gtdown|gtlist|\
		g6tup|g6tdown|g6tlist|\
		vxup|vxdown|vxlist|\
		vup|vdown|vlist|\
		mvup|mvdown|mvlist|\
		ivup|ivdown|ivlist|\
		gup|gdown|glist|\
		g6up|g6down|g6list|\
		ibup|ibdown|iblist|\
		ngup|ngdown|nglist|\
		rtup|rtdown|rtlist|\
		reup|redown|relist|\
		vrup|vrdown|vrlist)
			# Check usage
			case "$1" in
				'')
					# If not recursive call: print usage
					[ "${FUNCNAME[1]}" = "$FUNCNAME" ] ||
						netconf_usage "$action"
					;;
				help|usage)
					# Help/Usage
					netconf_usage "$action"
					;;
				*)
					# Do action
					local item refs addrs

					for item in "$@"; do
						eval refs="\${!${item}_ref*}"
						# for compatibility only
						eval addrs="\${!${item}_a*}"
						nctl_action_for_each \
							"netconf_$action" \
							"$item" $refs $addrs ||
						nctl_inc_rc rc
					done
					;;
			esac
			;;
		*)
			! :
			nctl_inc_rc rc
	esac

	return $rc
}

# Call default (inherit)
: ${netconf_action:='__netconf_action'}

usage()
{
	printf >&$NCTL_STDERR \
'usage: %s {start|stop|restart|list} [vrf|bridge|bond|physical|dummy|veth|
	gretap|ip6gretap|vxlan|vlan|macvlan|ipvlan|gre|ip6gre|ifb|
	neighbour|route|rule|vr] ...

       %s {vfup|vfdown|vflist}    {vrf interface|help|usage} ...

       %s {brup|brdown|brlist}    {bridge interface|help|usage} ...

       %s {bnup|bndown|bnlist}    {bond interface|help|usage} ...

       %s {phup|phdown|phlist}    {physical interface|help|usage} ...

       %s {dmup|dmdown|dmlist}    {dummy interface|help|usage} ...

       %s {vzup|vzdown|vzlist}    {veth interface|help|usage} ...

       %s {gtup|gtdown|gtlist}    {gretap interface|help|usage} ...

       %s {g6tup|g6tdown|g6tlist} {ip6gretap interface|help|usage} ...

       %s {vxup|vxdown|vxlist}    {vxlan interface|help|usage} ...

       %s {vup|vdown|vlist}       {vlan interface|help|usage} ...

       %s {mvup|mvdown|mvlist}    {macvlan interface|help|usage} ...

       %s {ivup|ivdown|ivlist}    {ipvlan interface|help|usage} ...

       %s {gup|gdown|glist}       {gre interface|help|usage} ...

       %s {g6up|g6down|g6list}    {ip6gre interface|help|usage} ...

       %s {ibup|ibdown|iblist}    {ifb interface|help|usage} ...

       %s {ngup|ngdown|nglist}    {neighbour name|help|usage} ...

       %s {rtup|rtdown|rtlist}    {route name|help|usage} ...

       %s {reup|redown|relist}    {rule name|help|usage} ...

       %s {vrup|vrdown|vrlist}    {virtual router name|help|usage} ...
' "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  "$program_invocation_short_name" \
  #

	exit $NCTL_EXIT_FAILURE
}

# Usage: netctl_conf [<var>] <item>...
netconf_items()
{
	local var="${1:?missing 1st argument to function \"$FUNCNAME\" (var)}"
	shift
	local -a items=()
	local -i i=0
	local -i rc=0

	while [ $# -gt 0 ]; do
		if [ -n "$1" ]; then
			if [ -z "${netconf_items_mtch##*|$1|*}" ]; then
				items[$((i++))]="$1"
			else
				rc=1
				break
			fi
		fi
		shift
	done

	if [ $i -le 0 ]; then
		items=("${netconf_items_dflt[@]}")
	fi

	[ $rc -eq 0 ]

	nctl_return "$var" "${items[@]}"
}

# Init
NETCONF_ACTION="$1"
shift
declare -a netconf_argv

# See how we were called
case "$NETCONF_ACTION" in
	start|stop|restart|list)
		# Load VRF, BRIDGE, BOND, PHYS, DUMMY, VETH,
		# GRETAP, IP6GRETAP, VXLAN, VLAN, MACVLAN, IPVLAN,
		# GRE, IP6GRE, IFB, NEIGHBOUR, ROUTE, RULE and VR configs
		netconf_items netconf_argv "$@"
		set --
		;;
	vfup|vfdown|vflist)
		# Load only VRF related configs
		netconf_argv=('vrf')
		;;
	brup|brdown|brlist)
		# Load only BRIDGE related configs
		netconf_argv=('bridge')
		;;
	bnup|bndown|bnlist)
		# Load only BOND related configs
		netconf_argv=('bond')
		;;
	phup|phdown|phlist)
		# Load only PHYS related configs
		netconf_argv=('phys')
		;;
	dmup|dmdown|dmlist)
		# Load only DUMMY related configs
		netconf_argv=('dummy')
		;;
	vzup|vzdown|vzlist)
		# Load only VETH related configs
		netconf_argv=('veth')
		;;
	gtup|gtdown|gtlist)
		# Load only GRETAP related configs
		netconf_argv=('gretap')
		;;
	g6tup|g6tdown|g6tlist)
		# Load only IP6GRETAP related configs
		netconf_argv=('ip6gretap')
		;;
	vxup|vxdown|vxlist)
		# Load only VXLAN related configs
		netconf_argv=('vxlan')
		;;
	vup|vdown|vlist)
		# Load only VLAN related configs
		netconf_argv=('vlan')
		;;
	mvup|mvdown|mvlist)
		# Load only MACVLAN related configs
		netconf_argv=('macvlan')
		;;
	ivup|ivdown|ivlist)
		# Load only IPVLAN related configs
		netconf_argv=('ipvlan')
		;;
	gup|gdown|glist)
		# Load only GRE related configs
		netconf_argv=('gre')
		;;
	g6up|g6down|g6list)
		# Load only IP6GRE related configs
		netconf_argv=('ip6gre')
		;;
	ibup|ibdown|iblist)
		# Load only IFB related configs
		netconf_argv=('ifb')
		;;
	ngup|ngdown|nglist)
		# Load only NEIGHBOUR related configs
		netconf_argv=('neighbour')
		;;
	rtup|rtdown|rtlist)
		# Load only ROUTE related configs
		netconf_argv=('route')
		;;
	reup|redown|relist)
		# Load only RULE related configs
		netconf_argv=('rule')
		;;
	vrup|vrdown|vrlist)
		# Load only VR related configs
		netconf_argv=('vr')
		;;
	*)
		usage
		;;
esac

# Source netconf library.
. @target@/netctl/lib/bash/libnetconf.sh "${netconf_argv[@]}" || usage

# Make command line items we operate valid shell variable names
if [ $# -gt 0 ]; then
	set -- "${@//[^[:alnum:]_]/_}"
	set -- "${@/#[[:digit:]]/_}"

	# Skip reference(s) and aliases (backward compatibility)
	set -- "${@##*_ref[[:digit:]]*}"
	set -- "${@##*_a[[:digit:]]*}"

	# There might be no arguments if reference(s) only specified
	$(IFS=''; [ -n "$*" ]) || exit 0
fi

# Execute action
"$netconf_action" "$NETCONF_ACTION" "$@"
