#!/bin/bash

# External tool dependencies, MUST always be defined,
# even if empty (e.g.: declare -a crt1_request_tools_list=())
declare -a crt1_request_tools_list=()

# Source startup code
. @target@/netctl/lib/bash/crt1.sh

# Source functions libraries
. @target@/netctl/lib/bash/libstring.sh
. @target@/netctl/lib/bash/libnetconf.sh

# Usage: netconf_argv_make <on_fail> [...]
netconf_argv_make()
{
	local -i on_fail="${1:?missing 1st argument to \"$FUNCNAME\" (on_fail)}"
	shift

	netconf_argv="$(nctl_mtch4pat '' '|' "$netconf_items_mtch" "$@")"
	local -i rc=$?

	[ $rc -eq 0 -o $on_fail -eq 0 ] || return

	# Turn into array ('\n' as word split)
	local ifs="$IFS"
	IFS='
'
	netconf_argv=($netconf_argv)
	IFS="$ifs"

	netconf_argv_size=${#netconf_argv[@]}

	# Use default list of items
	if [ $netconf_argv_size -le 0 ]; then
		netconf_argv=("${netconf_items_dflt[@]}")
		netconf_argv_mtch="$netconf_items_mtch"
	else
		# Add match mapping
		nctl_args2pat 'netconf_argv_mtch' '|' "${netconf_argv[@]}"
	fi

	return $rc
}

# Usage: netconf_reorder_up [...]
netconf_reorder_up()
{
	local item
	local -i i=0 j n

	unset netconf_argv

	n=${#netconf_items_dflt[@]}
	for ((j = 0; j < n; j++)); do
		item="${netconf_items_dflt[$j]}"

		[ -n "${netconf_argv_mtch##*|$item|*}" ] ||
			netconf_argv[$((i++))]="$item"
	done
}

# Usage: netconf_reorder_down [...]
netconf_reorder_down()
{
	local item
	local -i i=0 j n

	unset netconf_argv

	n=${#netconf_items_dflt[@]}
	for ((j = --n; j >= 0; j--)); do
		item="${netconf_items_dflt[$j]}"

		[ -n "${netconf_argv_mtch##*|$item|*}" ] ||
			netconf_argv[$((i++))]="$item"
	done
}

# Usage: netconf_reorder_show [...]
netconf_reorder_show()
{
	netconf_reorder_up "$@"
}

# Usage: netconf_for_each_all <action>
netconf_for_each_all()
{
	local action="${1:?missing 1st argument to \"$FUNCNAME\" (action)}"
	shift

	local item
	local -i rc=0

	# Adjust order in which items processed
	eval "netconf_reorder_${action}"

	for item in "${netconf_argv[@]}"; do
		eval "netconf_for_each_elem \
			'$action' \
			\"\${netconf_${item}_list[@]}\"" ||
		: $((rc += $?))
	done

	return $rc
}

# Usage: start [...]
start()
{
	netconf_for_each_all 'up'
}

# Usage: stop [...]
stop()
{
	netconf_for_each_all 'down'
}

# Usage: list [...]
list()
{
	netconf_for_each_all 'show'
}

# Usage: netconf_for_each_arg <action> <var_name>...
netconf_for_each_arg()
{
	local action="${1:?missing 1st argument to \"$FUNCNAME\" (action)}"
	shift

	local item
	local -i rc=0
	# It is not required to have contiguous indexing in array
	local -i i=0

	# Adjust order in which items processed
	eval "netconf_reorder_${action}"

	# Declare elements arrays dynamically
	for item in "${netconf_argv[@]}"; do
		eval "local -a elems_${item}=()"
	done

	# Note that element order is preserved
	while [ $# -gt 0 ]; do
		elem="$1"
		shift
		[ -n "$elem" ] || continue

		item="${elem%%_*}"
		if [ -z "$item" -o "$item" = "$elem" -o \
		     -n "${netconf_items_mtch##*|$item|*}" ]; then
			# Skip invalid, without items prefix elements
			# item == ""                 # _*       (begins with _)
			# item == $elem              # [^_]     (no _)
			# item !~ netconf_items_dflt # <item>_* (not item)
			for item in "${netconf_argv[@]}"; do
				eval "elems_${item}[\$((i++))]=\"${item}_${elem}\""
			done
		else
			# Skip valid, but not enabled via argv elements
			[ -z "${netconf_argv_mtch##*|$item|*}" ] ||
				continue
			eval "elems_${item}[\$((i++))]=\"$elem\""
		fi
	done

	# Execute $action for each element

	# Type specific are first
	for item in "${netconf_argv[@]}"; do
		eval "netconf_for_each_elem \
			'$action' \
			\"\${elems_${item}[@]}\"" ||
		: $((rc += $?))
	done

	return $rc
}

# Usage: up <var_name>...
up()
{
	netconf_for_each_arg 'up' "$@"
}

# Usage: down <var_name>...
down()
{
	netconf_for_each_arg 'down' "$@"
}

# Usage: show <var_name>...
show()
{
	netconf_for_each_arg 'show' "$@"
}

# Usage: usage [...]
usage()
{
	local -i rc=$?

	printf >&2 '
usage: %s {start|stop|list|help} [<item>...]
       %s {up|down|show} [<item>...] <var>...
       %s usage
' \
		"$program_invocation_short_name" \
		"$program_invocation_short_name" \
		"$program_invocation_short_name" \
		#

	if [ "${FUNCNAME[1]}" != "help" ]; then
		printf >&2 '
Use "%s help" and "%s help <item>..." to get more information.

' \
			"$program_invocation_short_name" \
			#
	fi

	return $rc
}

# Usage: help [...]
help()
{
	local -i rc=$?

	usage

	if [ $# -gt 0 ]; then
		local func FUNC

		while [ $# -gt 0 ]; do
			func="netconf_${1}_help"

			if [ "$(type -t "$func")" = 'function' ]; then
				eval "$func"
			else
				echo >&2 '
Help details is not available.
'
			fi

			shift
		done
	else
		local item item_desc

		cat >&2 <<'_EOF'

where
    <item> is space separated list of one or more of netconf
        supported configurations listed below:

_EOF

		for item in "${netconf_items_dflt[@]}"; do
			eval item_desc="\$netconf_item_${item}_desc"
			printf >&2 '%10s%-*s - %s\n' \
				'' $netconf_item_name_max "$item" "$item_desc"
		done

		cat >&2 <<'_EOF'

    <var> is space separated list of variables names to perform
        action on, taken from one or more configuration <item>s
        above.

_EOF
	fi

	return $rc
}

################################################################################

netconf_action="$1"
shift

declare -a netconf_argv=()
declare -i netconf_argv_size
declare netconf_argv_mtch=''

# See how we were called
case "$netconf_action" in
	start|stop|list)
		# Fail as soon as first non-item is seen (empty first arg - var)
		netconf_argv_make 1 "$@" || usage || exit
		;;
	up|down|show)
		# Stop match as soon as first non-item is seen (empty first arg - var)
		netconf_argv_make 0 "$@"

		# Skip to non-items (config entries)
		shift $netconf_argv_size

		[ $# -gt 0 ] || usage || exit

		# Make config entries we operate valid shell variable names
		set -- "${@//[^[:alnum:]_]/_}"
		set -- "${@/#[[:digit:]]/_}"

		# Skip reference(s) and aliases (backward compatibility)
		set -- "${@##*_ref[[:digit:]]*}"
		set -- "${@##*_a[[:digit:]]*}"

		# There might be no arguments after above substitutions
		$(IFS=''; [ -n "$*" ]) || exit 0
		;;
	help)
		# Fail as soon as first non-item is seen (empty first arg - var)
		netconf_argv_make 1 "$@" || usage || exit

		"$netconf_action" "${netconf_argv[@]}"
		exit 0
		;;
	usage)
		[ $# -eq 0 ]
		usage
		exit
		;;
	*)
		usage
		exit 1
		;;
esac

# Load netconf files
netconf_source "${netconf_argv[@]}" || usage || exit

# Execute action
"$netconf_action" "$@"
