# Configuration file is used to overwrite default variables
# values in library named exacly same as @this configuration
# file except '.cfg' extension replaced with '.sh'.
#
# File is sourced automatically by crt1.sh bootstrap code sourced
# from library. Any library MUST source at least crt1.sh.

# Netconf base directory.
# Default: $NCTL_PREFIX/etc/netconf
#
#NETCONF_DIR=

# Regular expressions, describing file names with configuration data
# (suffixed with "_f") and variable names inside such config files.

# Following variable(s)/item(s) are covered by default regular expressions:
#
#  Sub | Linux network  | bash(1) variable | Description
#  sys | interface name | name/format      |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
#  vrf |     any        |       any        | Virtual Routing Forwarding
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
# brid-|                |                  | Bridging of multiple Ethernet
# ge   |   br1          |     br1          | capable interfaces together. STP is
#      |                |                  | disabled by default on such ifaces.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
# bond-|   bond1        |     bond1        | Linux Link Aggregation Group (LAG)
# ing  |                |                  | interface.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
# phys |  en1, eth1     |  en1, eth1       | Physical NICs
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
# dummy|   dmy1, lo1    |     dmy1, lo1    | Linux Dummy Ethernet wire.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
# veth |   veth1a       |     veth1b       | Linux Virtual Ethernet wire.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
#      |                |                  | Transparent Ethernet Bridging (TEB)
# gre- |   gtp1         |     gtp1         | over Generic Routing Encapsulation
# tap  |                |                  | (GRE) protocol represented in
#      |                |                  | system as Ethernet capable network
#      |                |                  | interface.
#      |                |                  |
# ip6- |                |                  | gtp - is GRETAP over IPv4,
# gre- |   g6tp1        |     g6tp1        | g6tp - is IP6GRETAP over IPv6
# tap  |                |                  |
#      |                |                  | This is PtP interface.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
# vxlan|   vx1          |     vx1          | VXLAN interface for given VNI.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
#      |   eth0.32      |     eth0_32      | Hosted on regular Linux Ethernet
#      |                |                  | interface - "eth0".
#      |                |                  |
#      |   bond0.32     |     bond0_32     | Hosted on Linux Link Aggregation
#      |                |                  | (LAG) interface - "bond0".
#      |                |                  |
#      |   veth1a.32    |     veth1a_32    | Hosted on regular Linux Virtual
#      |                |                  | Ethernet wire - "veth1a".
#      |                |                  |
#      |   gtp1.32      |     gtp1_32      | Hosted on Linux GRETAP Ethernet
#      |                |                  | capable interface - "gtp1".
#      |                |                  |
#      |   g6tp1.32     |     g6tp1.32     | Hosted on Linux IP6GRETAP Ethernet
# vlan |                |                  | capable interface - "g6tp1".
#      |                |                  |
#      |   eth0.32.1    |     eth0_32_1    | Hosted on SVLAN 32 at Linux Ethernet
#      |                |                  | interface - "eth0".
#      |                |                  |
#      |   bond0.32.1   |     bond0_32_1   | Hosted on SVLAN 32 at Linux LAG
#      |                |                  | interface - "bond0".
#      |                |                  |
#      |   veth1a.32.1  |     veth1a_32_1  | Hosted on SVLAN 32 at Linux Virtual
#      |                |                  | Ethernet wire - "veth1a".
#      |                |                  |
#      |   gtp1.32.1    |     gtp1_32_1    | Hosted on SVLAN 32 at Linux GRETAP
#      |                |                  | Ethernet capable interface - "gtp1".
#      |                |                  |
#      |   g6tp1.32     |     g6tp1.32     | Hosted on SVLAN 32 at Linux IP6GRETAP
#      |                |                  | Ethernet capable interface - "g6tp1".
#      |                |                  |
#      |   vx1.32       |     vx1_32       | Hosted on VXLAN interface.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
#      |   mvl1         |     mvl1         |
# mac- |                |                  | Map one to many (one phys to many
# vlan |   mvl1.32      |     mvl1_32      | macvlans on it) on Ethernet capable
#      |                |                  | network interface.
#      |   mvl1.32.1    |     mvl1_32_1    |
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
#      |   ivl1         |     ivl1         |
# ip-  |                |                  | Map one to many (one phys to many
# vlan |   ivl1.32      |     ivl1_32      | ipvlans on it) on Ethernet capable
#      |                |                  | network interface.
#      |   ivl1.32.1    |     ivl1_32_1    |
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
#      |                |                  | Generic Routing Encapsulation (GRE)
# gre  |   gre1         |     gre1         | protocol represented in system
#      |                |                  | as PtP tunnel network interface.
#      |                |                  |
#      |                |                  | gre - is GRE over IPv4,
#      |                |                  | g6re - is GRE over IPv6
# ip6- |   g6re1        |     g6re1        |
# gre  |                |                  | QinQ/dot1q on gre not supported.
#      |                |                  |
#      |                |                  | This is PtP interface.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
# ifb  |   ifb1         |     ifb1         | Linux IFB network interface.
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
# route|       -        |  valid bash(1)   | Additional L3 routing information
#      |                |  variable name   | used by ip-route(8).
#      |                |                  |
# -----+----------------+------------------+------------------------------------
#      |                |                  |
#  vr  |       -        |  valid bash(1)   | Information used by ip-netns(8) to
#      |                |  variable name   | establish Virtual Router with
#      |                |  prefixed with   | custom network stack and network
#      |                |  "vr-"           | interface sets.
#      |                |                  |

# VRF, BRIDGE, BOND, PHYS, DUMMY, VETH, GRETAP, IP6GRETAP, VXLAN,
# VLAN, MACVLAN, IPVLAN, GRE, IP6GRE, IFB
# ===============================================================
#
# Following interface classes currently supported:
#
# VRF type represents Virtual Routing and Forwarding domain as L3 master network
# device associated with dedicated FIB table. Each member of given routing domain
# hould be enslaved to this master device (called l3mdev) to become available in
# given domain. Addresses and routes configured on these slaves will be available
# in associated FIB table. Two VRFs can have overlapping address space, but slave
# network device can only be associated with single VRF. IP addresses can be
# assigned to L3 master device: it behaves like system loopkack for given VRF
# (thus addresses can be from 127.0.0.0/8 network).
#
# BRIDGE type represents Ethernet bridge of capable interfaces. STP is off by
# on this interface by default.
#
# BOND type represents Link Aggregation Group (LAG) interface, called
# EtherChannel or Trunk by some network equipment vendors.
#
# PHYS real network interface cards or any existing interface not created with
# netconf system. Usage examples can be but not limited to configuring MTU,
# hardware address (MAC), rename interface.
#
# DUMMY type represents Ethernet interface connected to an Ethernet segment
# without any hosts (blackhole interface).
#
# VETH type represents virtual Ethernet wire with two interfaces at each end.
#
# GRETAP, IP6GRETAP types represent Transparent Ethernet Bridging (TEB) over GRE
# protocols. These interfaces are Ethernet capable, but still PtP by it's nature.
#
# VXLAN type represents an VXLAN Network Identifier (VNI) in VXLAN Tunnel End
# Point (VTEP) driver as network interface in Linux network stack. It is fully
# capable L2 interface that can host vlans on top of it or be enslaved to
# bridge or bonding interface.
#
# VLAN type represents generic 802.1q/802.1ad tagged interface with number of tags
# more than one.
#
# MACVLAN type represents MAC based vlan on top of Ethernet capable interface
# and used in many-to-one mappings (many macvlan to single interface). MACVLAN
# has random mac address on creation and could be changed if required.
#
# IPVLAN type is similar to MACVLAN except it does work on network layer (L3)
# inheriting hardware address from parent network device in L2 mode or using
# parent device network namespace to transmit packet in L3 mode. Note that in
# L3 mode you may need to configure static neighbour entries (e.g. ARP for IPv4
# and NDP for IPv6). There is also L3S (symmetric) mode that differs from L3
# in that netfilter connection tracking enabled for packets in both directions.
#
# GRE, IP6GRE types represent Generic Routing Encapsulation PtP tunnel.
#
# IFB type represents Intermediate Functional Block network interface, which
# is used in various traffic control configurations (e.g. mirroring or redirecting
# traffic from other interface(s)).
#
# L2 interface configuration, separated from L3 interface configuration by
# introducing alias to an L2 interface name (suffixed with "_a" variables).
# Each alias represents single entry for configuring L3 information and there
# are no limits implied by netconf on alias number (however, system might
# place their own limits on this). Note that using alias suffix (i.e. "_a")
# now deprecated: use "_ref" suffix instead.
#
# L2 interface configuration performed by ip-link(8), and configuration syntax
# has following format:
#
#   <bash_iface_name>=['"]<linux_iface_name> ip-link(8) "set" options["']
#
# where
#   <linux_iface_name>	- Linux network interface name, e.g: eth0.32, bond0.1.5,
#			  etc.
#   <bash_iface_name>	- valid bash(1) variable name, typically obtained from
#			 <linux_iface_name> by replacing all '.' with '_'
#
# Examples:
# ---------
#   # Create DOT1Q on top of bond1.32 with VID 1, set MTU 1500, set MAC address
#   # and place in network interface group "downlink"
#   bond1_32_1='bond1.32.1 link bond1.32 mtu 1500 address 02:11:22:33:44:55
#               group downlink type vlan id 1'
#
#   # Create DOT1Q on top of eth1.32 with VID 1, set MTU, promiscuity flag
#   # and place in network interface group "downlink"
#   eth1_32_1="eth1.32.1 link eth1.32 mtu 1500 promisc on group downlink
#              type vlan id 1"
#
#   # Create DOT1Q on top of eth1.32 with VID 1, set MTU, receive all mcast flag
#   # and place in network interface group "downlink"
#   eth1_32_2='eth1.32.2 link eth1.32 mtu 1500 allmulti on group downlink
#              type vlan id 1'
#
#   # Create MACVLAN on top of eth1.32.2 in "bridge" mode, set MAC address
#   # and place in network interface group "downlink"
#   mvl1_32_2='mvl1.32.2 link eth1.32.2 address 02:12:24:56:78:90 group downlink
#              type macvlan mode bridge'
#
#   # Create IPVLAN on top of eth1.32.1 in "L2" mode and place in network
#   # interface group "downlink"
#   ivl1_32_1='ivl1.32.1 link eth1.32.1 group downlink
#              type ipvlan mode l2'
#
#   # Create BRIDGE and place it in network interface group "downlink"
#   br1='br1 group downlink type bridge'
#   # Create BOND and enslave to the bridge br1
#   bond1='bond1 master br1 type bond'
#   # Create DOT1Q and enslave to the bridge br1
#   eth1_32_3='eth1.32.3 master br1 type vlan id 3'
#   # Create GRETAP and enslave to the bridge br1
#   gtp1_32_3='gtp1.32.3 master br1 type gretap'
#   # Create IP6GRETAP and enslave to the bridge br1
#   g6tp1_32_3='g6tp1.32.3 master br1 type ip6gretap'
#   # Create DOT1Q on top of gtp1.35 with VID 3, set MTU,
#   # and enslave to the bridge br1
#   gtp1_32_1='gtp1.32.1 link gtp1.32 mtu 1500 master br1 type vlan id 1'
#
#   Create VXLAN interface
#   vx1="vx1 type vxlan id 1 nolearning dstport 4789"
#
#   # Create dummy interface
#   dmy128="dmy128 type dummy"
#
#   # Create ifb interface
#   ifb128="ifb128 type ifb"
#
#   # Create veth interface pairs
#   veth10a="veth10a type veth peer dev veth10b up"
#
#   # Create GRE
#   gre1='gre1 type gre local 172.16.1.1 remote 172.16.1.2 ttl 255'
#
#   # Create GRE6
#   g6re1='g6re1 type ip6gre local fd11::1 remote fd11::2 hoplimit 255'
#
# See ip-link(8) for more information on how to configure interface
# of each supported type.
#
# L3 interface configuration performed by ip-address(8), and config syntax
# has following format:
#
#   <bash_iface_name>_ref<n>=['"]<linux_iface_name>:<n> ip-address(8) \
#			         "add" options["']
#
# where
#   <linux_iface_name>
#   <bash_iface_name>	- are same as for L2 interface name.
#   <n>			- alias number, starting from 0.
#
# Usage of ifconfig(8) (and other network diagnostic utilities, such as arp(8),
# route(8), netstat(8) etc.) on Linux is not recommented, as they provide only
# subset of features supported in modern Linux network stack. These tools
# supported only for compatibility with UNIX or UNIX-like systems.
#
# Examples:
# ---------
#  # variables
#  bond1_32_1_ref0='bond1.32.1:0 10.0.0.1/30 broadcast +'
#  eth1_32_1_ref0="eth1.32.1:0 192.168.0.1/30 broadcast +"
#  eth1_32_2_ref1="eth1.32.2:1 172.16.0.1/30 broadcast +"
#  mvl1_32_2_ref0='mvl1.32.2:0 172.16.0.5/30 broadcast +'
#
#  # filenames
#  bond1.32.1, veth1a.32.1:0, mvl1.32, mvl1.32:0, gre1, g6re1,
#  gtp1.32.1, g6tp1.32.1
#

NETCONF_VRF_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_VRF_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_BRIDGE_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_BRIDGE_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_BOND_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_BOND_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_PHYS_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_PHYS_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_DUMMY_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_DUMMY_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_VETH_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_VETH_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_GRETAP_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_GRETAP_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_IP6GRETAP_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_IP6GRETAP_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_VXLAN_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_VXLAN_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_VLAN_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_VLAN_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_MACVLAN_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_MACVLAN_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_IPVLAN_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_IPVLAN_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_GRE_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_GRE_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_IP6GRE_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_IP6GRE_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

NETCONF_IFB_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_IFB_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

# NEIGHBOUR
# =========
#
# Neighbour information configured with ip-neighbour(8). Each variable
# describes single neighbour table entry. There are no limits on number
# of neighbours configured in netconf, however system might place
# their own limits. Also there is no matter how to store neighbours,
# each in separate file or all in single file.
#
# Neighbour configuration has following format:
#
#  <var_name>=['"]ip-neighbour(8) options["']
#
# where
#  <var_name>		- Valid bash(1) variable name. Typically user login is
#			  used with not allowed for bash(1) variable name
#			  characters replaced with '_'.
#
# Examples:
# ---------
#  WN2013110104="bond1.20.269 203.0.113.2 lladdr 00:11:22:33:44:55 nud permanent"
#

NETCONF_NEIGHBOUR_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_NEIGHBOUR_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

# ROUTE
# =====
#
# Routing information configured with ip-route(8). Each variable
# describes single routing entry. There are no limits on number
# of routes configured in netconf, however system might plase
# their own limits. Also there is no matter how to store routes,
# each in separate file or all in single file.
#
# Route configuration has following format:
#
#  <var_name>=['"]ip-route(8) options["']
#
# where
#  <var_name>		- Valid bash(1) variable name. Typically user login is
#			  used with not allowed for bash(1) variable name
#			  characters replaced with '_'.
#
# Examples:
# ---------
#  WN2013110104="203.0.113.2 dev bond1.20.269 src 203.0.113.1 proto netctl"
#

NETCONF_ROUTE_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_ROUTE_REGEX_F='[_[:alpha:]]+[_[:alnum:]]*'

# RULE
# ====
#
# Policy-based routing configured with ip-rule(8). Each variable
# describes single PBR entry. There are no limits on number of
# rules configured in netconf, however system might plase
# their own limits (i.e. 65536 rules per network namespace). Also
# there is no matter how to store rule, each in separate file or
# all in single file.
#
# Rule configuration has following format:
#
#  <var_name>=['"]ip-rule(8) options["']
#
# where
#  <var_name>		- Valid bash(1) variable name. Typically user login is
#			  used with not allowed for bash(1) variable name
#			  characters replaced with '_'.
#
# Examples:
# ---------
#  family_4_pref_0x7f10="-4 0x7f10 fwmark 0x7f100000/0xfff10000 table divert"
#

NETCONF_RULE_REGEX='family_[46]_pref_(0x[[:xdigit:]]+|[[:digit:]]+)'
NETCONF_RULE_REGEX_F='family_[46](\.pref_(0x[[:xdigit:]]+|[[:digit:]]+))?'

# VR
# ==
#
# VR stands for Virtual Router is a netconf name of the Linux Network namespace
# implementation (netns), which allows to use simultaneously few copies of
# network stack, separated from each other and global namespace, with separate
# set of network interfaces, routing tables, firewalls, xfrm policies etc.
#
# Network namespace heavily used in operating system based virtualization
# technologies such as LXCs (Linux Containers) and OpenVZ.
#
# Netconf implementation of netns uses ip-netns(8) functionality to establish
# and configure network namespace.
#
# Configuration stored in "vr" subdirectory and filenames are prefixed with
# "vr-". Each configuration file may contain number of variables, each of which
# describes single "vr" and has following format:
#
#  <vr_var_name>=['"]<vr_name> <linux_iface_name>...["']
#
# where
#   <vr_var_name>	- Valid bash(1) variable name. Typically obtained from
#			  <vr_name> by replacing all characters, that not valid
#			  in bash(1) variable name.
#   <vr_name>		- Name of the Virtual Router, This name is used in
#			  references with ip-netns(8) to network namespace.
#   <linux_iface_name>	- An L2 interface name, as described early in DOT1Q,
#			  QINQ section.
#
# Examples:
# ---------
#  customer_office1="customer-office1 veth1b.60.508 bond1.60.508"
#

NETCONF_VR_REGEX='[_[:alpha:]]+[_[:alnum:]]*'
NETCONF_VR_REGEX_F='vr-[_[:alpha:]]+[_[:alnum:]]*'
