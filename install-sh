#!/bin/sh -e

begin_netconf='##### BEGIN NETCONF #####'
end_netconf='##### END NETCONF #####'

# Usage: begin_netconf_header <file>
begin_netconf_header()
{
	local func="${FUNCNAME:-begin_netconf_header}"

	local f="${1:?missing 1st arg to ${func}() (<file>)}"

	echo "$begin_netconf" >>"$f"
}
# Usage: end_netconf_header <file>
end_netconf_header()
{
	local func="${FUNCNAME:-end_netconf_header}"

	local f="${1:?missing 1st arg to ${func}() (<file>)}"

	echo "$end_netconf" >>"$f"
}

# Usage: prepare_iproute2_mapfile <file>
prepare_iproute2_mapfile()
{
	local f="${1:?missing 1st arg to ${func}() (<file>)}"

	if [ -e "$f" ]; then
		# Remove netconf block
		[ -f "$f" ] || return
		sed -n -e "/$begin_netconf/,/$end_netconf/!p" -i "$f" ||:
	else
		# Create empty file
		: >"$f" || return
	fi
}

iproute2_dir="$ROOT/etc/iproute2"
if [ ! -d "$iproute2_dir" ]; then
	[ ! -e "$iproute2_dir" ] || exit 0
	mkdir -p "$iproute2_dir"
fi

## group

f="$iproute2_dir/group"
if prepare_iproute2_mapfile "$f"; then
	begin_netconf_header "$f"

	cat >>"$f" <<'_EOF'

# From kernel perspective group numbers are seen as plain
# 32-bit integer threated as unsigned.
#
# Each new interface created in default(0) network device
# group if other group id is not given at creation.
#
# Network device group -1 (0xffffffff) might have special
# meaning using this group id is not recommended.

# Following groups currently supported:
#
#    0x0 - default
#    0x1 - uplink
#    0x2 - downlink
#    0x3 - loopback
#    0x4 - management
#    0x5 - unnumbered
#    0x6 - sink

0xf	mask

0x1	uplink
0x2	downlink
0x3	loopback
0x4	management
0x5	unnumbered
0x6	sink

0xffff0	rlm_mask

0x00000	rlm_cosmos
0x00010	rlm_sink
0x00020	rlm_parity
0x00040	rlm_lo
0x00080	rlm_wo

# Predefined group names
0		default
0xffffffff	_reserved

_EOF

	end_netconf_header "$f"
fi

## rt_proto

f="$iproute2_dir/rt_protos"
if prepare_iproute2_mapfile "$f"; then
	begin_netconf_header "$f"

	cat >>"$f" <<'_EOF'

#
#	netconf routes
#
200	netconf

_EOF

	end_netconf_header "$f"
fi

## rt_realms

f="$iproute2_dir/rt_realms"
if prepare_iproute2_mapfile "$f"; then
	begin_netconf_header "$f"

	cat >>"$f" <<'_EOF'

0xffff	mask

0x0001	sink
0x0002	parity
0x0004	lo
0x0008	wo

_EOF

	end_netconf_header "$f"
fi

## rt_tables

f="$iproute2_dir/rt_tables"
if prepare_iproute2_mapfile "$f"; then
	begin_netconf_header "$f"

	cat >>"$f" <<'_EOF'

#
# Divert
#
0x10	divert	# 16

#
# Parity
#
0x20	parity	# 32

#
# LO
#
0x40	lo	# 64

#
# WO
#
0x80	wo	# 128

#
# Management
#
0xd0	mgmt	# 208

#
# Internet
#
0xe0	inet	# 224

#
# Sink
#
0xf0	sink	# 240

_EOF

	end_netconf_header "$f"
fi
